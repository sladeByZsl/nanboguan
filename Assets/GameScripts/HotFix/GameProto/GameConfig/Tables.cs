
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Luban;

namespace GameConfig
{
public partial class Tables
{
    private readonly Dictionary<Type, object> _tableCache = new Dictionary<Type, object>();
    #region The Tables

    private item.TbItem m_TbItem;
    public item.TbItem TbItem 
    {
        get
        {
            if (m_TbItem == null)
            {
                m_TbItem = new item.TbItem(defaultLoader("item_tbitem"));
                m_TbItem.ResolveRef(this);
                _tableCache[typeof(item.TbItem)] = m_TbItem;
            }
            return m_TbItem;
        }
        set
        {
            m_TbItem = value;
            m_TbItem.ResolveRef(this);
            _tableCache[typeof(item.TbItem)] = m_TbItem;
        }
    }

    #endregion

    System.Func<string, ByteBuf> defaultLoader;

    public Tables(System.Func<string, ByteBuf> loader)
    {
        SetDefaultLoader(loader);
        Init();
    }
    
    public void SetDefaultLoader(System.Func<string, ByteBuf> loader)
    {
        defaultLoader = null;
        defaultLoader = loader;
    }

    // public  T GetTable<T>(int id) where T : class
    // {
    //     var type = typeof(T);
    //     if (_tableCache.TryGetValue(type, out var table))
    //     {
    //         var tb= table as IConfig;
    //         return tb.Get(id);
    //     }
    //     return null;
    // }

    public void Init(){}
}

}
